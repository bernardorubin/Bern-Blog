              /////////////////////////
                Authentication Notes Blog
              /////////////////////////

uncomment bcrypt gem

rails g model user first_name last_name email password_digest
change Migration

       add_index :users, :email   in the migration


rails g controller sessions


edit routes
        resources :users, only:[:new, :create]
        resources :sessions, only:[:new, :create] do
          delete :destroy, on: :collection
        end

edit controller


edit User model add
          -> has_secure_password

//////////////////////////////////////////////////////////////////


User must be signed in to create a question

add fk

rails g migration add_user_references_to_posts user:references

add in migration
        , index: true
add to user.rb
          has_many :posts, dependent: :nullify
add to post.rb
          belongs_to :user

add to application controller
      def authenticate_user!
        redirect_to new_session_path, alert: 'please sign in' unless user_signed_in?
      end

      def user_signed_in?
      session[:user_id].present?
      end

      helper_method :user_signed_in?

      def current_user
        User.find session[:user_id] if user_signed_in?
      end
      # make this method accessible in any view file
      helper_method :current_user


add to posts controller
        before_action :authenticate_user!, except: [:show, :index]


add to create method in posts controller
          @post.user = current_user


rails db:migrate

Check if password works in terminal
          u = User.new
          u.password = "new password"

Check if relationship works
associate user to post
                p = Post.new
                p.user = User.first
                p -> shows a user id


add sessions view new.html.erb

create users controller and views

add links in navbar to views

added as: :root to a route

added to user model->
      def full_name
        "#{first_name} #{last_name}".strip.titleize
      end


              /////////////////////////
                Authorization Notes
      https://github.com/CanCanCommunity/cancancan
              /////////////////////////

add cancancan to gemfile
bundle
rails g cancan:ability

edit ability.rb in models
        user ||= User.new

        if user.is_admin?
          can :manage, :all
        end

        can :manage, Post do |q|
          q.user == user
        end


rails g migration add_is_admin_to_users is_admin:boolean

added ", default: false to migration"


make admin in console
        u = User.last
        u.is_admin = true
        u.save







//////////////////////////////////////////////////////////

rails g controller admin/dashboard
added dashboard routes


edited admin controller
created base controller manually

app/views/admin/dashboard/index.html.erb


create base controller

layout admin in base controller
create layout



hits public, then goes to routes
hash -> same input, same output


Asset Pipeline-->

to minimize requests - > combine all files into one

rails assets:precompile -> not needed but joins files




Deploy to heroku ->
      a little more expensive
      git commit am
      heroku create awesome-answers-bernardo
      git push heroku master
      heroku run rails db:migrate
      heroku logs --tail
      heroku pg:reset DATABASE



rails g migration add_user_references_to_comments user:references



////////////////////////////////////////////////////////////////////
Add likes
////////////////////////////////////////////////////////////////////
rails g model like user:references post:references

rails db:migrate


edit user model
	has_many :likes, dependent: :destroy
  has_many :liked_posts, through: :likes, source: :post

edit post model
	has_many :likes, dependent: :destroy
  has_many :likers, through: :likes, source: :user

test in console
	p = Post.last
	u = User.last
  p.likers << u
	p.likers

edit like model
  validates :post_id, uniqueness: {scope: :user_id}

test in console do this twice ->   reload!
  l = Like.new(user: User.last, post: Post.first)
  l.save
  second time it should rollback!

edit routes -> inside products routes
  resources :likes, only: [:create, :destroy]

rails g controller likes create destroy --skip-template-engine --skip-assets

delete created likes routes in routes.rb

edit ability.rb
  cannot :like, Post do |p|
    p.user == user
  end
  can :like, Post do |p|
    p.user != user
  end

edit post_model define these methods ->
  def liked_by?(user)
    likes.exists?(user: user)
  end
  def like_for(user)
    likes.find_by(user: user)
  end


edit likes controller

edit views
	index
	show

VIEW USER LIKES
  created routes to index likes
  created views to index likes
  created links to views
  added secure access for likes of each user
